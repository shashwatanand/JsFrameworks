{
"AWSTemplateFormatVersion": "2010-09-09",
    "Description": "",
    "Metadata": {

    },
    "Parameters": {
    
    },
    "Mappings": {

    },
    "Conditions": {

    },
    "Resources": {
        "DAppNodeEC2Instance" : {
            "Type" : "AWS::EC2::Instance",
            "Properties" : {
                "InstanceType" : "t2.micro",
                "ImageId" : "ami-07b4156579ea1d7ba",
                "KeyName" : "AWS-EC2-Key",
                "SecurityGroups" : [
                    {
                        "Ref" : "DAppNodeSG"
                    }
                ],
                "UserData": {
                    "Fn::Base64": "#!/binbash\napt-get update -qq\napt-get install -y apt-transport-https ca-certificates\napt-key adv --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys 58118E89F3A912897C070ADBF76221572C52609D\necho \"deb https://apt.dockerproject.org/repo ubuntu-xenial main\" | tee /etc/apt/sources.list.d/docker.list\napt-get update -qq\napt-get purge lxc-docker || true\napt-get -y install linux-image-extra-$(uname -r) linux-image-extra-virtual\napt-get -y install docker-engine\nusermod -aG docker ubuntu\nmkdir -p /etc/systemd/system/docker.service.d\nprintf \"[Service]\\nExecStart=\\nExecStart=/usr/bin/dockerd -H fd:// -H tcp://0.0.0.0:2375\\n\" >>  /etc/systemd/system/docker.service.d/docker.conf\nsystemctl daemon-reload\nsystemctl restart docker\n"
                }
            }
        },
        "DAppNodeSG" : {
            "Type" : "AWS::EC2::SecurityGroup",
            "Properties" : {
                "GroupDescription" : "For instance that allows ssh, http and docker ports",
                "SecurityGroupIngress" : [
                    {
                        "IpProtocol" : "tcp",
                        "FromPort" : "80",
                        "ToPort" : "80",
                        "CidrIp" : "0.0.0.0/0"
                    },
                    {
                        "IpProtocol" : "tcp",
                        "FromPort" : "22",
                        "ToPort" : "22",
                        "CidrIp" : "0.0.0.0/0"
                    },
                    {
                        "IpProtocol" : "tcp",
                        "FromPort" : "2375",
                        "ToPort" : "2375",
                        "CidrIp" : "0.0.0.0/0"
                    }
                ]
            }
        },
        "DAppRDSNode" : {
            "Type" : "AWS::RDS::DBInstance",
            "Properties" : {
                "DBName" : "appdb",
                "Engine" : "MySQL",
                "MasterUsername" : "myrdsuser",
                "MasterUserPassword" : "myrdsuser",
                "DBInstanceClass" : "db.t2.micro",
                "AllocatedStorage" : "5"
            }
        },
        "DAppRDSSG" : {
            "Type" : "AWS::RDS::DBSecurityGroup",
            "Properties" : {
                "GroupDescription": "Security Group for RDS public access",
                "DBSecurityGroupIngress" : [
                    {
                        "CIDRIP" : "0.0.0.0/0"
                    }
                ]
            }
        }
        
    },
    "Outputs": {

    }
}